import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export default function PledgeSite() {
  const [pledges, setPledges] = useState([]);
  const [form, setForm] = useState({ name: "", amount: "", email: "" });
  const [countdown, setCountdown] = useState("");

  // Countdown to Oscars100 Hut2Hut 2026 (Feb 6–8, 2026)
  useEffect(() => {
    const targetDate = new Date("2026-02-06T08:00:00").getTime();
    const timer = setInterval(() => {
      const now = new Date().getTime();
      const distance = targetDate - now;
      if (distance < 0) {
        clearInterval(timer);
        setCountdown("Event in progress!");
        return;
      }
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      setCountdown(`${days}d ${hours}h ${minutes}m`);
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // Fetch live pledges from Google Sheets
  useEffect(() => {
    async function fetchPledges() {
      try {
        const res = await fetch("YOUR_GOOGLE_APPS_SCRIPT_URL");
        const data = await res.json();
        setPledges(data.pledges || []);
      } catch (error) {
        console.error("Error fetching pledges", error);
      }
    }

    fetchPledges();
  }, []);

  // Stats
  const total = pledges.reduce((sum, p) => sum + (parseFloat(p.amount) || 0), 0);
  const average = pledges.length ? (total / pledges.length).toFixed(2) : 0;

  // Handle form submit
  const handleSubmit = async (e) => {
    e.preventDefault();

    await fetch("YOUR_GOOGLE_APPS_SCRIPT_URL", {
      method: "POST",
      mode: "no-cors",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        name: form.name,
        amount: form.amount,
        email: form.email,
        timestamp: new Date().toISOString(),
      }),
    });

    // Optimistic update
    setPledges([...pledges, { name: form.name, amount: form.amount }]);
    setForm({ name: "", amount: "", email: "" });
  };

  return (
    <div className="min-h-screen bg-white text-gray-900 font-sans">
      {/* Hero Section */}
      <section className="bg-gray-100 py-20 text-center">
        <h1 className="text-4xl font-bold mb-4">Cat & Rob’s Hut2Hut Ultra Challenge</h1>
        <p className="text-lg max-w-2xl mx-auto">
          Supporting <strong>Oscars100</strong> through the Hut2Hut Ultramarathon. 
          Join us by pledging your support!
        </p>
        <p className="mt-6 text-2xl font-semibold">Event Countdown: {countdown}</p>
      </section>

      {/* Stats Section */}
      <section className="grid md:grid-cols-3 gap-6 max-w-4xl mx-auto py-12 px-6">
        <Card className="text-center shadow-md">
          <CardContent>
            <h2 className="text-xl font-semibold">Total Pledged</h2>
            <p className="text-2xl font-bold">${total.toFixed(2)}</p>
          </CardContent>
        </Card>
        <Card className="text-center shadow-md">
          <CardContent>
            <h2 className="text-xl font-semibold">Number of Pledges</h2>
            <p className="text-2xl font-bold">{pledges.length}</p>
          </CardContent>
        </Card>
        <Card className="text-center shadow-md">
          <CardContent>
            <h2 className="text-xl font-semibold">Average Pledge</h2>
            <p className="text-2xl font-bold">${average}</p>
          </CardContent>
        </Card>
      </section>

      {/* Pledge Form */}
      <section className="max-w-xl mx-auto py-12 px-6">
        <h2 className="text-2xl font-bold mb-6 text-center">Make a Pledge</h2>
        <form onSubmit={handleSubmit} className="grid gap-4">
          <input
            type="text"
            placeholder="Your Name"
            className="border rounded-lg p-3"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
            required
          />
          <input
            type="number"
            placeholder="Amount (USD)"
            className="border rounded-lg p-3"
            value={form.amount}
            onChange={(e) => setForm({ ...form, amount: e.target.value })}
            required
          />
          <input
            type="email"
            placeholder="Your Email (kept private)"
            className="border rounded-lg p-3"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
            required
          />
          <Button type="submit" className="w-full">Submit Pledge</Button>
        </form>
      </section>

      {/* Public Pledge List */}
      <section className="max-w-2xl mx-auto py-12 px-6">
        <h2 className="text-2xl font-bold mb-6 text-center">Our Amazing Supporters</h2>
        <ul className="space-y-4">
          {pledges.map((p, idx) => (
            <li key={idx} className="flex justify-between border-b pb-2">
              <span className="font-medium">{p.name}</span>
              <span className="text-gray-700">${parseFloat(p.amount).toFixed(2)}</span>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
}
